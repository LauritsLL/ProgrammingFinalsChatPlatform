!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/laurits/Desktop/ProgrammingfromLinux/HTX/HTX-PROGRAMMERING/Chat platform/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
Command	command.py	/^class Command():$/;"	c
DbManager	database_manager.py	/^class DbManager():$/;"	c
Encryption	command.py	/^class Encryption():$/;"	c
Table	Table.py	/^class Table():$/;"	c
__init__	Table.py	/^    def __init__(self, tablename, data, commit=True):$/;"	m	class:Table
__init__	command.py	/^    def __init__(self) -> None:$/;"	m	class:Encryption	typeref:typename:None
__init__	command.py	/^    def __init__(self):$/;"	m	class:Command
__init__	database_manager.py	/^    def __init__(self):$/;"	m	class:DbManager
__str__	Table.py	/^    def __str__(self):$/;"	m	class:Table
accept_friend_request	database_manager.py	/^    def accept_friend_request(self, request):$/;"	m	class:DbManager
add_user	command.py	/^    def add_user(self):$/;"	m	class:Command
add_user_to_conversation	database_manager.py	/^    def add_user_to_conversation(self, current_user, conversation, username):$/;"	m	class:DbManager
authenticate_user	database_manager.py	/^    def authenticate_user(self, username, hashed):$/;"	m	class:DbManager
c	main.py	/^from command import commands as c$/;"	x	nameref:unknown:commands
change_name	command.py	/^    def change_name(self):$/;"	m	class:Command
change_name	database_manager.py	/^    def change_name(self, name, opened_conversation):$/;"	m	class:DbManager
command_format	command.py	/^    def command_format(self, command): return command.replace(" ", "").replace("_", "").lower()$/;"	m	class:Command
commands	command.py	/^commands = Command()$/;"	v
create_connection	database_manager.py	/^    def create_connection(self, host_name, username, user_password, db_name=""):$/;"	m	class:DbManager
create_conversation	database_manager.py	/^    def create_conversation(self, user, username):$/;"	m	class:DbManager
create_device_user_relation	database_manager.py	/^    def create_device_user_relation(self, publickey_str, user, device):$/;"	m	class:DbManager
create_encrypted_message	database_manager.py	/^    def create_encrypted_message(self,encrypted,message_obj,deviceuserrel_id):$/;"	m	class:DbManager
create_message	database_manager.py	/^    def create_message(self, user, conversation):$/;"	m	class:DbManager
create_privatekey	command.py	/^    def create_privatekey(self, user):$/;"	m	class:Encryption
decline_friend_request	database_manager.py	/^    def decline_friend_request(self, request):$/;"	m	class:DbManager
decrypt_message	command.py	/^    def decrypt_message(self,encrypted_message):$/;"	m	class:Encryption
delete	Table.py	/^    def delete(self):$/;"	m	class:Table
dm	Table.py	/^import database_manager as dm$/;"	I	nameref:module:database_manager
dm	command.py	/^import database_manager as dm$/;"	I	nameref:module:database_manager
dm	main.py	/^import database_manager as dm$/;"	I	nameref:module:database_manager
encrypt_existing_messages_for_other_user	command.py	/^    def encrypt_existing_messages_for_other_user(self, encrypted_messages, other_user):$/;"	m	class:Encryption
encrypt_message	command.py	/^    def encrypt_message(self, message, conversation, sender, other_device_user_rel=None):$/;"	m	class:Encryption
execute_query	database_manager.py	/^    def execute_query(self, query):$/;"	m	class:DbManager
execute_read_query	database_manager.py	/^    def execute_read_query(self, query):$/;"	m	class:DbManager
friend_request	database_manager.py	/^    def friend_request(self, username, user):$/;"	m	class:DbManager
friend_requests	command.py	/^    def friend_requests(self):$/;"	m	class:Command
friends	command.py	/^    def friends(self):$/;"	m	class:Command
generate_device	database_manager.py	/^    def generate_device(self, device_id=-1):$/;"	m	class:DbManager
get	Table.py	/^    def get(self, field_name):$/;"	m	class:Table
get	Table.py	/^def get(tablename, flags, column="all", filtered=False):$/;"	f
get_column_names	Table.py	/^def get_column_names(tablename):$/;"	f
get_conversations	database_manager.py	/^    def get_conversations(self, user, get_ids=False):$/;"	m	class:DbManager
get_device	command.py	/^    def get_device(self):$/;"	m	class:Encryption
get_device_user_rel	database_manager.py	/^    def get_device_user_rel(self, user, device_id=0):$/;"	m	class:DbManager
get_encrypted_messages_current_conversation	database_manager.py	/^    def get_encrypted_messages_current_conversation(self, dur_specific_device, opened_conversati/;"	m	class:DbManager
get_friend_requests	database_manager.py	/^    def get_friend_requests(self, user, user2=None):$/;"	m	class:DbManager
get_friends	database_manager.py	/^    def get_friends(self, user):$/;"	m	class:DbManager
get_id	Table.py	/^def get_id(tablename): $/;"	f
get_messages	database_manager.py	/^    def get_messages(self, conversation, user, device):$/;"	m	class:DbManager
get_privatekey	command.py	/^    def get_privatekey(self, user):$/;"	m	class:Encryption
get_public_key	database_manager.py	/^    def get_public_key(self, user):$/;"	m	class:DbManager
get_user_obj	command.py	/^    def get_user_obj(self):$/;"	m	class:Command
getsalt	database_manager.py	/^    def getsalt(self,username):$/;"	m	class:DbManager
help	command.py	/^    def help(self):$/;"	m	class:Command
is_friends_with	database_manager.py	/^    def is_friends_with(self, user, other):$/;"	m	class:DbManager
list_format	command.py	/^    def list_format(self, l):$/;"	m	class:Command
list_format	database_manager.py	/^    def list_format(self, l):$/;"	m	class:DbManager
login	command.py	/^    def login(self):$/;"	m	class:Command
logout	command.py	/^    def logout(self):$/;"	m	class:Command
main	main.py	/^def main():$/;"	f
make_shortcut	command.py	/^    def make_shortcut(self):$/;"	m	class:Command
manager	database_manager.py	/^manager = DbManager()$/;"	v
members	command.py	/^    def members(self):$/;"	m	class:Command
open_conversation	command.py	/^    def open_conversation(self):$/;"	m	class:Command
open_conversation	database_manager.py	/^    def open_conversation(self,conversationToOpen,user):$/;"	m	class:DbManager
print_user	command.py	/^    def print_user(self): # DEBUG\/TESTING$/;"	m	class:Command
r	command.py	/^import random as r$/;"	I	nameref:module:random
r	database_manager.py	/^import random as r$/;"	I	nameref:module:random
read_messages	command.py	/^    def read_messages(self):$/;"	m	class:Command
read_public_key	command.py	/^    def read_public_key(self, pem: str):$/;"	m	class:Encryption
register	command.py	/^    def register(self):$/;"	m	class:Command
registeruser	database_manager.py	/^    def registeruser(self, username, salt, hashed, firstname, lastname):$/;"	m	class:DbManager
save	Table.py	/^    def save(self, fields={}):$/;"	m	class:Table
send_friend_request	command.py	/^    def send_friend_request(self):$/;"	m	class:Command
send_message	command.py	/^    def send_message(self):$/;"	m	class:Command
send_public_key_to_database	command.py	/^    def send_public_key_to_database(self, user):$/;"	m	class:Encryption
set	Table.py	/^    def set(self, commit=True, **fields):$/;"	m	class:Table
set_nickname	command.py	/^    def set_nickname(self):$/;"	m	class:Command
set_nickname	database_manager.py	/^    def set_nickname(self, user, opened_conversation, nickname):$/;"	m	class:DbManager
setup	database_manager.py	/^    def setup(self):$/;"	m	class:DbManager
setup_encryption	command.py	/^    def setup_encryption(self, user):$/;"	m	class:Encryption
shortcuts	command.py	/^    def shortcuts(self):$/;"	m	class:Command
start_conversation	command.py	/^    def start_conversation(self):$/;"	m	class:Command
typeswithquotes	Table.py	/^typeswithquotes=[type("")]$/;"	v
